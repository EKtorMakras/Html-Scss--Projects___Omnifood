@use 'sass:math';



// Get values of nested map
@function deep-map-get($map, $keys...) {

    @if type-of($map) !='map' {
        @error "The argument $map: '#{$map}' is of incorrect type: #{type-of($map)}.Type of 'map' is required.";
    }

    // @if length($keys)==1 and type-of($keys)=='map' {
    //     $keys: append($keys, 'base');
    // }


    @each $key in $keys {
        $map: map-get($map, $key);
    }

    @return $map;
}




@function str-explode($string, $delimiter: '') {

    @if type-of($string) !='string' {
        @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }

    @else if type-of($delimiter) !='string' {
        @error 'The argument $string: `#{$string}` is of incorrect type: `#{type-of($string)}`. Type of `String` is required!';
    }


    $result: ();
    $running: true;

    @if str-length($delimiter)==0 {
        @for $i from 1 through str-length($string) {
            $result: append($result, str-slice($string, $i, $i));
        }

        @return $result;
    }

    @while $running {
        $index: str-index($string, $delimiter);

        @if $index !=null {
            $item: str-slice($string, 1, ($index - 1));
            $result: append($result, $item);
            $string: str-slice($string, ($index + str-length($delimiter)));
        }

        @else {
            $running: false;
        }
    }

    @return append($result, $string);
}





// Convert px to em
@function em($pixels, $context: 16) {
    @return (math.div($pixels, $context)) * 1em;
}


// Convert px to rem
@function rem($pixels, $context: 16) {
    @return (math.div($pixels, $context)) * 1rem;
}